# init
# Get current room - room 0

# get the exits of the current room -> [n,s,w,e]
# Add current to visited
# ---should look like this...
# {0: {"n": "?", "s": "?", "w": "?", "e": "?"}}

#  initialize stack
#  (direction = none, prev_room = none)

# start traversal in DFT mode
# room info = pop(0 -> (directions, previous))
# current room = current_room.id
# previous_room = room_info[1]

# loop over unvisited exits / or all exits
# 	move in that directions
# 	update traversal_path with direction
# check if current room is in visited
# if not then add to visited
# should look like this
# {current room: {exits...}}

# this should fail on the first iteration, because there is no previous
# if previous room is not none:
# this is where we update previous room
# visited[previous_room][direction] = current_room

# this should fail on the first iteration, because there is no previous
# Update current room exits if we have a direction
#  if direction is not None
# visited[current_room][reverseDirection] = previous_room

# Loop over unvisited exits/ or maybe exits?
# move in that direction
# update traversal_path -> direction
# update the stack -> (direction current_room)

# bfs will traverse over visited for the destination with question marks